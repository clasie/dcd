<?php

/**
 * Language tool class inclusion
 **/
 
 //catch the current path
$path = dirname(__FILE__);

//get the file
require_once $path . "../../custom_tools/language.php";

/**
 * @file
 * A block module that displays recent blog and forum posts.
 */
/**
 * Implements hook_help.
 *
 * Displays help and module information when you click 'Help' from the admin -> module's list
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function boxcadeau_help($path, $arg) {
  switch ($path) {
    case "admin/help#boxcadeau":
      return '<p>'.$path.  t("Displays links to nodes created on this date") .'</p>';
      break;
  }
}
/**
 * Implements hook_block_info().
 *
 * Tells Drupal what block this module creates
 */
function boxcadeau_block_info() {
  $blocks['boxcadeau'] = array(
    'info' => t('Box cadeau'), //is mandatory. The name that will appear in the admin->structure->block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}
/**
 * Custom content function.
 *
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 *
 * @return
 *   A result set of the targeted posts.
 */
function boxcadeau_contents($display){   //$display argument is new.
  //Get today's date.
  $today = getdate();
  /*
   array
  'seconds' => int 52
  'minutes' => int 56
  'hours' => int 21
  'mday' => int 13
  'wday' => int 3
  'mon' => int 6
  'year' => int 2012
  'yday' => int 164
  'weekday' => string 'Wednesday' (length=9)
  'month' => string 'June' (length=4)
  0 => int 1339617412
   */
  //Calculate midnight a week ago.
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
  //Get all posts from one week ago to the present.
  $end_time = time();
  $max_num = variable_get('boxcadeau_max', 3);
  //Use Database API to retrieve current posts.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1) //Published.
    //->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC'); //Most recent first. Query paused here.
   if ($display == 'block'){
   // Restrict the range if called with 'block' argument.
    $query->range(0, $max_num);
   } //Now proceeds to execute().
   //If called by page, query proceeds directly to execute().
   return $query->execute();
}
/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function boxcadeau_block_view($delta = '') {
  switch($delta){
    case 'boxcadeau':
      //titre du block
      $block['subject'] = t('Box cadeau');
      if(user_access('access content')){
        //Use our custom function to retrieve data.
        //$result IS A 'DatabaseStatementBase'
        $result = boxcadeau_contents('block');
        //Array to contain items for the block to render.
        $items = array();
        //Iterate over the resultset and format as links.
        foreach ($result as $node){
          //var_dump($node);
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          );
        }
        //var_dump($items);
        if (empty($items)) { //No content in the last week.
          $block['content'] = t('No posts available.');
        }
        else {
            /*
          //Pass data through theme function.
          $block['content']['posts'] = array(
            '#theme' => 'item_list__boxcadeau__block',
            '#items' => $items,
          );
          //Add a link to the page for more entries.
          $block['content']['more'] = array(
            '#theme' => 'more_link__boxcadeau',
            '#url' => 'boxcadeau',
            '#title' => t('See the full list of current posts.'), //display in tips
          ); */
        }
      }
  }
  //-----------------------------------------------------------------------------------------------FLAG
  
  //init val
  $tmp = 'Langue indéterminée!';
  
  //i18n the message cadeau 
  if(Language::isFrench()){
  
    //fr
    $tmp = <<< TAG
	   <br/>
	   <div class='cust_boxcadeau'>
	      <div class='cust_boxcadeau_sub'>
		      Un <b>cadeau</b> est offert <br />
		      à chaque première <b>commande</b>!
	      </div>
	   </div> 

TAG;

     
  }else{
  
    //nl
    $tmp = <<< TAG
	   <br/>
	   <div class='cust_boxcadeau'>
	      <div class='cust_boxcadeau_sub'>
		      Un <b>cadeau</b> est offert <br />
		      à chaque première <b>commande</b>!
	      </div>
	   </div> 

TAG;
  }     

  $block['content']= $tmp;
  return $block;
}
/**
 * Implements hook_menu().
 *
 * To configure our module into the admin GUI
 */
function boxcadeau_menu() {
  $items = array();
  //shown into the admin
  $items['admin/config/content/boxcadeau'] = array(
    'title' => 'Box Cadeau',
    'description' => 'Configuration for Current posts module',
    'page callback' => 'drupal_get_form',            // will call current_posts_form
    'page arguments' => array('boxcadeau_form'), // -------------------> called!
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  //shown in the Navigation Menu
  $items['boxcadeau'] = array(
    'title' => 'Box cadeau',
    'page callback' => '_boxcadeau_page',
    'access arguments' => array('access boxcadeau content'),
    'type' => MENU_CALLBACK, // MENU_NORMAL_ITEM, //Will appear in Navigation menu.
  );
  return $items;
}
/**
 * Form function, called by drupal_get_form()
 * in current_posts_menu().
 */
function boxcadeau_form($form, &$form_state) {
  $form['boxcadeau_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of posts'),
    '#default_value' => variable_get('boxcadeau_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
  );
  return system_settings_form($form); // <-------- catched by the system API
}
/**
 * Implements validation from the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function boxcadeau_form_validate($form, &$form_state){
  $max_num = $form_state['values']['boxcadeau_max'];
  if (!is_numeric($max_num)){
    form_set_error('boxcadeau_max', t('You must enter an integer for the maximum number of posts to display.'));
  }
  else if ($max_num <= 0){
    form_set_error('boxcadeau_max', t('Maximum number of posts to display must be positive.'));
  }
}
/**
 * Implements hook_permission().
 */
function boxcadeau_permission(){
  return array(
    'access boxcadeau content' => array(
      'title' => t('Access content for the Current posts module'),
    )
  );
}
/**
* Custom page callback function, declared in current_posts_menu().
*/
function _boxcadeau_page() {
  //echo 1; die();
  drupal_set_title('Box cadeau');
  $result = boxcadeau_contents('page');
  //Array to contain items for the page to render.
  $items = array();
  //Iterate over the resultset and format as links.
  foreach ($result as $node) {
    $items[] = array(
    'data' => l($node->title, 'node/' . $node->nid),
    );
  }
  if (empty($items)) { //No content in the last week.
    $page_array['boxcadeau_arguments'] = array(
      //Title serves as page subtitle
      '#title' => t('All posts from the last week'),
      '#markup' => t('No posts available.'),
    );
    return $page_array;
  }
  else {
    $page_array['boxcadeau_arguments'] = array(
      '#title' => t('All posts from the last week'),
      '#items' => $items,
      //Theme hook with suggestion.
      '#theme' => 'item_list__boxcadeau',
    );
    return $page_array;
  }
}
